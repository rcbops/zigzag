# -*- coding: utf-8 -*-

# ======================================================================================================================
# Imports
# ======================================================================================================================

from __future__ import absolute_import
from future.moves.urllib.parse import urlsplit, urlunsplit
import re


class LinkGenerationFacade(object):

    def __init__(self, mediator):
        """Create a LinkGenerationFacade

        Args:
            mediator (ZigZag): the mediator that stores shared data
        """
        self._git_sha = None
        self._mediator = mediator
        try:
            if mediator.ci_environment == 'asc':
                self._git_sha = self._get_testsuite_prop('MOLECULE_GIT_COMMIT')
                split = urlsplit(self._get_testsuite_prop('REPO_URL'))
                path = self._strip_git_ending(split.path)
                self._molecule_scenario = self._get_testsuite_prop('MOLECULE_SCENARIO_NAME')
                self._repo_fork = list(filter(None, path.split('/')))[0]
                self._repo_name = self._get_testsuite_prop('MOLECULE_TEST_REPO')
            elif mediator.ci_environment == 'mk8s':
                self._git_sha = self._get_testsuite_prop('GIT_COMMIT')
                split = urlsplit(self._get_testsuite_prop('GIT_URL'))
                path = self._strip_git_ending(split.path)

                pr_testing = None  # Assume we are not testing a PR
                if 'CHANGE_BRANCH' in mediator.testsuite_props:
                    if not re.match(r'unknown', mediator.testsuite_props['CHANGE_BRANCH'], re.IGNORECASE):
                        pr_testing = True

                if pr_testing:
                    self._repo_fork = self._get_testsuite_prop('CHANGE_FORK')
                    self._repo_name = list(filter(None, path.split('/')))[1]
                else:  # Branch testing on a set cadence
                    self._repo_fork, self._repo_name = list(filter(None, path.split('/')))
            self._scheme = split.scheme
            self._netloc = split.netloc
        except KeyError:
            pass  # If we dont have the info to generate links we want to silently fail

    def github_testlog_failure_link(self, test_log):
        """Generates a link to test case failure in GitHub
        The link generated by this method should highlight the line that caused the failure

        Args:
            test_log (ZigZagTestLog): the test log used to generate the link

        Returns:
            str: The string containing the link to the line that failed
        """
        try:
            if self._mediator.ci_environment == 'asc':
                # for Molecule repo of repos pattern
                path = "/{}/{}/tree/{}/molecule/{}/{}".format(self._repo_fork,
                                                              self._repo_name,
                                                              self._git_sha,
                                                              self._molecule_scenario,
                                                              test_log.test_file)
            elif self._mediator.ci_environment == 'mk8s':
                base_dir = 'tools/installer'  # this value is specific to mk8s and can not be derived from the XML
                path = "/{}/{}/tree/{}/{}/{}".format(self._repo_fork,
                                                     self._repo_name,
                                                     self._git_sha,
                                                     base_dir,
                                                     test_log.test_file)
            failure_line_number = self._get_line_number_from_failure_output(test_log)
            line = failure_line_number or test_log.def_line_number or ''
            if line:
                line = "L{}".format(line)
            return urlunsplit((self._scheme, self._netloc, path, '', line))
        except AttributeError:
            pass  # If we ask for the failure link and can't determine it we should silently fail

    def github_diff_link(self, upstream_fork, upstream_base):
        """Generates a GitHub compare link based on the attributes of this facade
        This method would be used when we have a last known pass of a given test
        We are making an assumption that the attributes of this facade are children of
        upstream_fork and upstream_base

        GitHub docs describing the compare view
        https://help.github.com/articles/comparing-commits-across-time/

        Args:
            upstream_fork (str): the fork you wish to compare against
            upstream_base (str): the branch or SHA you want to compare against

        Returns:
            str: The string containing the link to the relevant github compare view
        """
        try:
            # These variable names are the language used by GitHub
            base_fork = self._repo_fork
            base = self._git_sha
            head_fork = upstream_fork
            compare = upstream_base
            path = "/{}/{}/compare/{}...{}:{}".format(base_fork,
                                                      self._repo_name,
                                                      base,
                                                      head_fork,
                                                      compare)
            return urlunsplit((self._scheme, self._netloc, path, '', ''))
        except AttributeError:
            return 'Unknown'  # If we ask for the diff link and can't determine it we will supply 'Unknown'

    def _get_line_number_from_failure_output(self, test_log):
        """Attempts to pull the failure line number from failure output

        Args:
            test_log (ZigZagTestLog): the test log to look for failure output on

        Returns:
            str: the line number if found otherwise emptystring
        """

        regex = re.escape(test_log.test_file) + r':(\d+)'
        match = re.search(regex, test_log.full_failure_output)
        if match:
            return match.group(1)
        else:
            return ''

    def _strip_git_ending(self, path):
        """A helper to remove .git from the end of a string if found

        Args:
            path (str): The string to strip

        Returns:
            str: The stripped string
        """
        if path.endswith('.git'):
            path = path[:-4]
        return path

    def _get_testsuite_prop(self, prop):
        """A helper to make sure we have good values comming from mediator.testsuite_props.
        I believe this method is a sin and I do feel bad for it.

        Args:
            prop (str): the name of the prop to look for

        Returns:
            str: the value from mediator.testsuite_props

        Raises:
            KeyError : if a value is 'Unknown' for this module its the same as not being there
        """
        value = self._mediator.testsuite_props[prop]
        if re.match(r'unknown', value, re.IGNORECASE):
            raise KeyError
        return value

    @property
    def git_sha(self):
        """Gets the git_sha found by this facade

        Returns:
            str: the git_sha discovered by this facade
        """
        return self._git_sha
